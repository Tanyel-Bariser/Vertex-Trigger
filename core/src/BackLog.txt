=== Refactor AbstractGameScreen ===
Screen:
- knows what sprites are in the view of the camera
- draws the sprites it is given from GameLoop

LevelBuilder:
- creates all sprites, objects and entities required at the start of the level and start music
- creates callbacks and passes them into entities requiring them

Level:
- level object is created by levelbuilder and is given all objects and entities to store by the levelbuilder
- updates, i.e. creates new and kills off entities as game progresses
, e.g. by asking if entity is in screen, asking if entity is dead, call backs
- has an update(delta, alpha) method called by GameLoop, which calls the update method on all entities
- returns all sprites including non-entities like platforms
- returns a list of DestroyOffScreen with method isInScreen(boolean), which Bullet implements
- make sure level loaded after player death is same level as player is already on

GameLoop:
- takes an array of DestroyOffScreen and passes it to the Screen to be updated
- performs render loop/alpha calculation to pass it to Level.update(delta, alpha)


Because the GameLoop shouldn't know about specific entities, i.e. whether or not an entity is a bullet, or mortal, etc.
and the Screen should know what Sprite is or isn't in the Screen then...
When the Screen render method calls the GameLoop, the GameLoop asks the Level, "what entities have you got for me?"
The Level can decide what's still in the level by giving an Entity, i.e. bullet, to the GameLoop to find out from the
Screen "Is this entity in the screen or not?" and when the GameLoop returns true/false to the Level, the Level can
decide whether or not the Bullet is still in the level


Design:
- First design a mid-game level, to inform what we need to "teach" the user in the initial levels 
- Paper design of level - with shield next to magnet
- Refactor Asset manager and get more atlases by this point
- Build design of level
- Main screen
- Refactor everything
- Get good art/music
- Build more levels

Defects:
- [mobile] Needs performance testing, i.e. log GC cycles. Sometimes game simulation stops, we think it's due to excessive asset load - Cache everything, especially sprites upfront so not garbage
- [mobile] Zoom needs adjusting because the bee is often not in view due to the screen being rectangular and not square like the desktop version
- [mobile] Fix main screen size issue for Android
- [mobile] Game sometimes crashes, figure out when it happens and fix it

Assets:
- Implement bullet ricochet sound
- When an attracted object hits the magnet, it makes a sound to signify the magnet is switched off for a couple of seconds

Code Quality:
- Rationalize/refactor Assets.java and remove string literals and stop loading all skins every level e.g. UI stuff
- Also pull out methods that get things that aren't skins into ButtonFactory, FontFactory etc

R and D:
- Particle explosions

GAME DESIGN EXPLORATION:
Perhaps picking up a gun instead of shield can be the pickup that causes the player to be attracted to the magnet

	What if we created a flying monster that shot metal spiked balls, which also bounce off of platforms and
go through portals in the same way the players bullets do. This will make the game play sort of like the Atari
Breakout game where the player has to work out exactly where the metal spiked balls would land after bouncing
and teleporting around in order to avoid them. In addition we could have magnets in these levels which pull on
the metal spiked balls so they curve.
	To make this more interesting we could allow the player to choose whether or not to pick up a metallic,
bubble like, shield which on the one hand would guard him from the metallic spiked balls, but on the other
hand cause him to be pulled to-and-fro by the magnets into other potential dangers. This would give the player
an interesting choice to decide whether or not picking up the metallic shield is advantageous for that
particular level.
	This concept could be extended into a main theme of the game where each world, i.e. set of levels, has a
unique power up, each of which has its own combination of pros and cons forcing the player to choose whether
or not it is worth picking up for each particular level.
	Another example that might be worth exploring could be an under water world, where the player starts off
under water in each level and has a limited amount of oxygen, i.e. time, to complete the level and has the choice
to pick up a bubble, which allows him to breathe under water, i.e. have unlimited time, but has the disadvantage
of making him jump extra high in a set of levels with spiked ceilings or be within jumping height of other enemies.
	Fire shield that protects against fire balls but burns platforms the player stands on so they disappear.
	Lever to flood fire level to make it into an under water level.